AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CloudFormation template to launch an Amazon Linux 2 EC2 instance,
  install Docker and NGINX, pull a Lambda container image from ECR, run it,
  and configure NGINX to proxy requests from port 80 to port 9000.
  Outputs a public URL to access the Lambda function.

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - x2gd.large
      - x2gd.xlarge
      - x2gd.2xlarge
      - x2gd.4xlarge
      - x2gd.8xlarge
      - x2gd.12xlarge
      - x2gd.16xlarge
      - x2gd.24xlarge
      - x2gd.32xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  RepoName:
    Description: Name of the ECR repository
    Type: String
    Default: circuitscan_lambda_circom_v2

  RepoTag:
    Description: Tag of the ECR repository image
    Type: String
    Default: latest

  EnvVars:
    Description: String of environment variables separated by spaces (e.g., "KEY1=value1 KEY2=value2")
    Type: String
    Default: ""

Mappings:
  AWSRegionToAMI:
    us-west-2:
      AMI: ami-01cd4de4363ab6ee8

Resources:
  LambdaEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install docker -y
          yum install nginx -y
          service docker start
          service nginx start
          usermod -a -G docker ec2-user
          REGION=$(ec2-metadata -z | awk '{print $2}' | sed 's/[a-z]$//')
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.$REGION.amazonaws.com
          docker pull ${AWS::AccountId}.dkr.ecr.$REGION.amazonaws.com/${RepoName}:${RepoTag}

          # Create .env file
          echo -e "${EnvVars}" | tr ' ' '\n' > /home/ec2-user/.env

          docker run --env-file /home/ec2-user/.env -d -p 9000:8080 ${AWS::AccountId}.dkr.ecr.$REGION.amazonaws.com/${RepoName}:${RepoTag}

          # Configure NGINX as a reverse proxy with CORS support
          cat > /etc/nginx/conf.d/reverse-proxy.conf <<EOF
          server {
              listen 80;
              client_max_body_size 50M;
              location / {
                  proxy_pass http://localhost:9000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  add_header 'Access-Control-Allow-Origin' '*';
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                  add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept';
                  if (\$request_method = 'OPTIONS') {
                      return 204;
                  }
              }
          }
          EOF

          service nginx restart

          echo "Lambda container is running on port 9000 and accessible via NGINX on port 80" > /home/ec2-user/container-status.txt

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to the Lambda container
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECRAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetAuthorizationToken
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                Resource: "*"

Outputs:
  InstancePublicURL:
    Description: URL to access the Lambda function
    Value: !Sub "http://${LambdaEC2Instance.PublicDnsName}"
    Export:
      Name: InstancePublicURL

