AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a Lambda function from an ECR image with a function URL

Parameters:
  ECRRepoName:
    Type: String
    Description: The name of the ECR repository
    Default: circuitscan_lambda_circom
  ECRImageTag:
    Type: String
    Description: The tag of the ECR image
    Default: latest
  BlobURL:
    Type: String
    Description: For file storage on backblaze
    Default: https://circuitscan-artifacts.s3.us-west-2.amazonaws.com/
  AssocBucket:
    Type: String
    Description: S3 Bucket in which to store package/address associations
    Default: circuitscan-artifacts
  APIKeyBucketName:
    Description: Name of the new private S3 bucket (Was created by main server stack)
    Type: String
    Default: circuitscan-apikeys
  MaxMemory:
    Type: String
    Description: Lambda memory limit
    Default: 10240
  MaxStorage:
    Type: String
    Description: Lambda /tmp size limit
    Default: 10240

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: APIKeyPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub arn:aws:s3:::${APIKeyBucketName}/*
                  - !Sub arn:aws:s3:::${APIKeyBucketName}
  InstanceIAMUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: CircomCompilerLambdaUser
      Policies:
        - PolicyName: CircomCompilerLambdaUserPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                Resource:
                  - !Sub arn:aws:s3:::${AssocBucket}/*
                  - !Sub arn:aws:s3:::${AssocBucket}

  InstanceAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref InstanceIAMUser

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-lambda-function"
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepoName}:${ECRImageTag}"
      MemorySize: !Ref MaxMemory
      EphemeralStorage:
        Size: !Ref MaxStorage
      Timeout: 600
      Environment:
        Variables:
          BB_ACCESS_KEY_ID: !Ref InstanceAccessKey
          BB_SECRET_ACCESS_KEY: !GetAtt InstanceAccessKey.SecretAccessKey
          BB_REGION: !Ref AWS::Region
          BLOB_BUCKET: !Ref AssocBucket
          BLOB_URL: !Ref BlobURL
          APIKEY_BUCKET: !Ref APIKeyBucketName

  LambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt LambdaFunction.Arn

  LambdaFunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunctionUrl"
      FunctionName: !Ref LambdaFunction
      Principal: "*"
      FunctionUrlAuthType: NONE

Outputs:
  LambdaFunctionUrl:
    Description: The URL of the Lambda function
    Value: !GetAtt LambdaFunctionUrl.FunctionUrl

